Traceback (most recent call last):
  File "Run_gpCAM.py", line 61, in <module>
    main()
  File "Run_gpCAM.py", line 36, in main
    main2()
  File "/home/marcus/Coding/Professional/gpCAM_venv/lib/python3.8/site-packages/gpcam/main.py", line 238, in main
    ask_res = gp_optimizers[gp_idx].ask(current_position, n = number_of_suggested_measurements,
  File "/home/marcus/Coding/Professional/gpCAM_venv/lib/python3.8/site-packages/gpcam/gp_optimizer.py", line 352, in ask
    maxima, func_evals = sm.find_objective_function_maxima(self.gp,objective_function,
  File "/home/marcus/Coding/Professional/gpCAM_venv/lib/python3.8/site-packages/gpcam/surrogate_model.py", line 114, in find_objective_function_maxima
    opti, func_eval = differential_evolution(
  File "/home/marcus/Coding/Professional/gpCAM_venv/lib/python3.8/site-packages/gpcam/optimization.py", line 84, in differential_evolution
    res = devo(
  File "/home/marcus/Coding/Professional/gpCAM_venv/lib/python3.8/site-packages/scipy/optimize/_differentialevolution.py", line 308, in differential_evolution
    ret = solver.solve()
  File "/home/marcus/Coding/Professional/gpCAM_venv/lib/python3.8/site-packages/scipy/optimize/_differentialevolution.py", line 750, in solve
    self._calculate_population_energies(
  File "/home/marcus/Coding/Professional/gpCAM_venv/lib/python3.8/site-packages/scipy/optimize/_differentialevolution.py", line 873, in _calculate_population_energies
    calc_energies = list(self._mapwrapper(self.func,
  File "/home/marcus/Coding/Professional/gpCAM_venv/lib/python3.8/site-packages/scipy/optimize/_differentialevolution.py", line 1261, in __call__
    return self.f(x, *self.args)
  File "/home/marcus/Coding/Professional/gpCAM_venv/lib/python3.8/site-packages/gpcam/surrogate_model.py", line 52, in evaluate_objective_function
    obj_eval = evaluate_gp_objective_function(x, objective_function, gp)
  File "/home/marcus/Coding/Professional/gpCAM_venv/lib/python3.8/site-packages/gpcam/surrogate_model.py", line 78, in evaluate_gp_objective_function
    res = gp.shannon_information_gain(x)["sig"]
  File "/home/marcus/Coding/Professional/gpCAM_venv/lib/python3.8/site-packages/gpcam/fvgp.py", line 845, in shannon_information_gain
    e2 = self.entropy(full_gp_covariances)
  File "/home/marcus/Coding/Professional/gpCAM_venv/lib/python3.8/site-packages/gpcam/fvgp.py", line 763, in entropy
    s, logdet = self.slogdet(S)
  File "/home/marcus/Coding/Professional/gpCAM_venv/lib/python3.8/site-packages/gpcam/fvgp.py", line 560, in slogdet
    sign, logdet = torch.slogdet(A)
KeyboardInterrupt
